<?php	/**	 * Silence is golden; exit if accessed directly	 */	if ( ! defined( 'ABSPATH' ) ) {		exit;	}	/**	 * Bootstrap CMB2	 */	require_once 'inc/cmb2/init.php';	/**	 * Load the CMB2 powered theme options page	 */	require_once 'inc/theme-options.php';	if ( ! function_exists( 'pegasus_theme_setup' ) ) :		/**		 * Sets up theme defaults and registers support for various WordPress features.		 *		 * Note that this function is hooked into the after_setup_theme hook, which		 * runs before the init hook. The init hook is too late for some features, such		 * as indicating support for post thumbnails.		 *		 * @since 1.0		 */		function pegasus_theme_setup() {						/*			 * Let WordPress manage the document title.			 * By adding theme support, we declare that this theme does not use a			 * hard-coded <title> tag in the document head, and expect WordPress to			 * provide it for us.			 */			//add_theme_support( 'title-tag' );			add_theme_support( 'menus');			add_theme_support( 'post-thumbnails' );					/**			 * Register our primary menu			 */			register_nav_menu( 'primary', __( 'Primary Menu', 'pegasus-bootstrap' ) );			//register_nav_menu( 'primary', __( 'Primary Menu', 'pegasus-bootstrap' ) );			register_nav_menu( 'mega-one', __( 'Mega Menu One', 'pegasus-bootstrap' ) );			register_nav_menu( 'mega-two', __( 'Mega Menu Two', 'pegasus-bootstrap' ) );			register_nav_menu( 'mega-three', __( 'Mega Menu Three', 'pegasus-bootstrap' ) );			register_nav_menu( 'mega-four', __( 'Mega Menu Four', 'pegasus-bootstrap' ) );			register_nav_menu( 'social-icons', __( 'Social Icon Menu', 'pegasus-bootstrap' ) );			register_nav_menu( 'user-menu', __( 'User Account Menu', 'pegasus-bootstrap' ) );			register_nav_menu( 'more-menu', __( 'Header Three More Menu', 'pegasus-bootstrap' ) );			/**			 * Register sidebar widget area			 */			register_sidebar( array(				'name'          => __( 'Sidebar', 'pegasus-theme' ),				'id'            => 'sidebar-1',				'description'   => __( 'Add widgets here to appear in your sidebar.', 'pegasus-bootstrap' ),				'before_widget' => '<aside id="%1$s" class="widget %2$s">',				'after_widget'  => '</aside>',				'before_title'  => '<h2 class="widget-title">',				'after_title'   => '</h2>',			) );			/* Shop Sidebar widget */			register_sidebar( array(				'name' => __( 'Shop Sidebar Widget', 'pegasus-bootstrap' ),				'id' => 'shop-sidebar',				'description' => __( 'Displays on the shop page where the sidebar should go.', 'pegasus-bootstrap' ),				'before_widget' => '<div id="%1$s" class="widget %2$s">',				'after_widget'  => '</div>',				'before_title'  => '<h3 class="widgettitle">',				'after_title'   => '</h3>',			));						/* Shop Cart widget */			register_sidebar( array(				'name' => __( 'Shop Cart Widget', 'pegasus-bootstrap' ),				'id' => 'shop-cart',				'description' => __( 'Displays on sub menu of cart in header.', 'pegasus-bootstrap' ),				'before_widget' => '<div id="%1$s" class="widget %2$s">',				'after_widget'  => '</div>',				'before_title'  => '<h3 class="widgettitle">',				'after_title'   => '</h3>',			));						/* FOOTER SOCIAL widget */			register_sidebar( array(				'name' => __( 'Footer Social Widget', 'pegasus-bootstrap' ),				'id' => 'footer-social',				'description' => __( 'Displays on the footer right before the copyright.', 'pegasus-bootstrap' ),				'before_widget' => '<div id="%1$s" class="widget %2$s">',				'after_widget'  => '</div>',				'before_title'  => '<h3 class="widgettitle">',				'after_title'   => '</h3>',			));							/**				 * Register however many footer widgets our options say to				 */				$footer_widgets = absint( pegasus_theme_get_option( 'footer_widget_areas' ) );				register_sidebars( $footer_widgets, array(					'name'          => __( 'Footer %d', 'pegasus-bootstrap' ),					'id'            => 'footer',					'description'   => __( 'Add widgets here to appear in your sidebar.', 'pegasus-bootstrap' ),					'before_widget' => '<aside id="%1$s" class="widget %2$s">',					'after_widget'  => '</aside>',					'before_title'  => '<h2 class="widget-title">',					'after_title'   => '</h2>',				) );				}	endif;	add_action( 'after_setup_theme', 'pegasus_theme_setup' );			/* remove admin bar for all users when logged in */	//add_filter( 'show_admin_bar', '__return_false' );	/**	 * Enqueue scripts and styles.	 *	 * @since 1.0	 */	function pegasus_theme_scripts() {		global $content_width;		wp_enqueue_style( 'pegasus', get_stylesheet_uri() );		/**		 * Add theme custom CSS from theme options		 */		//$site_width = 0 < absint( pegasus_theme_get_option( 'width' ) ) ? absint( pegasus_theme_get_option( 'width' ) ) : 960;		//$content_width = $content_width;		//$sidebar_float = pegasus_theme_get_option( 'sidebar_position' );		//$content_float = 'right' == $sidebar_float ? 'left' : 'right';		$bg_color = ! empty(  pegasus_theme_get_option( 'bg_color' ) ) ?  pegasus_theme_get_option( 'bg_color' ) : '#fff';		$content_color = ! empty(  pegasus_theme_get_option( 'content_color' ) ) ?  pegasus_theme_get_option( 'content_color' ) : '#777';		$nav_bg_color = ! empty(  pegasus_theme_get_option( 'nav_bg_color' ) ) ?  pegasus_theme_get_option( 'nav_bg_color' ) : 'rgba(0,0,0,0)';		$nav_item_color = ! empty(  pegasus_theme_get_option( 'nav_item_color' ) ) ?  pegasus_theme_get_option( 'nav_item_color' ) : '#777';		$sub_nav_bg_color = ! empty(  pegasus_theme_get_option( 'sub_nav_bg_color' ) ) ?  pegasus_theme_get_option( 'sub_nav_bg_color' ) : '#dedede';		$sub_nav_item_color = ! empty(  pegasus_theme_get_option( 'sub_nav_item_color' ) ) ?  pegasus_theme_get_option( 'sub_nav_item_color' ) : '#777';		$hover_bg_color = ! empty(  pegasus_theme_get_option( 'hover_bg_color' ) ) ?  pegasus_theme_get_option( 'hover_bg_color' ) : '#ccc';		$current_item_color = ! empty(  pegasus_theme_get_option( 'current_item_color' ) ) ?  pegasus_theme_get_option( 'current_item_color' ) : '#337ab7';		$mobile_color = ! empty(  pegasus_theme_get_option( 'mobile_toggle_color' ) ) ?  pegasus_theme_get_option( 'mobile_toggle_color' ) : '#000';		$header_three_color = ! empty(  pegasus_theme_get_option( 'header_three_bg_color' ) ) ?  pegasus_theme_get_option( 'header_three_bg_color' ) : '#fff';		$header_three_mobile_color = ! empty(  pegasus_theme_get_option( 'header_three_mobile_bg_color' ) ) ?  pegasus_theme_get_option( 'header_three_mobile_bg_color' ) : '#fff';		$header_three_menu_position = ! empty(  pegasus_theme_get_option( 'header_three_right_checkbox' ) ) ?  pegasus_theme_get_option( 'header_three_right_checkbox' ) : 'left';		$header_three_scroll_bg_color = ! empty(  pegasus_theme_get_option( 'header_three_scroll_bg_color' ) ) ?  pegasus_theme_get_option( 'header_three_scroll_bg_color' ) : '#fff';		$header_three_scroll_item_color = ! empty(  pegasus_theme_get_option( 'header_three_scroll_item_color' ) ) ?  pegasus_theme_get_option( 'header_three_scroll_item_color' ) : '#fff';		$top_bar_bkg_color = ! empty(  pegasus_theme_get_option( 'top_bar_bkg_color' ) ) ?  pegasus_theme_get_option( 'top_bar_bkg_color' ) : '#fff';		$top_bar_content_color = ! empty(  pegasus_theme_get_option( 'top_bar_font_color' ) ) ?  pegasus_theme_get_option( 'top_bar_font_color' ) : '#777';		$header_bkg_color = ! empty(  pegasus_theme_get_option( 'header_bkg_color' ) ) ?  pegasus_theme_get_option( 'header_bkg_color' ) : 'rgba(0,0,0,0)';				$header_fixed_checkbox =  pegasus_theme_get_option('header_one_fixed_checkbox');		$top_header_checkbox =  pegasus_theme_get_option('top_header_chk');		$header_three_disable_fixed_checkbox =  pegasus_theme_get_option('header_three_disable_fixed_checkbox');		$header_choice =  pegasus_theme_get_option( 'header_select' );				$footer_bkg_color = ! empty(  pegasus_theme_get_option( 'footer_bkg_color' ) ) ?  pegasus_theme_get_option( 'footer_bkg_color' ) : 'rgba(0,0,0,0)';		$bottom_footer_bkg_color = ! empty(  pegasus_theme_get_option( 'bottom_footer_bg_color' ) ) ?  pegasus_theme_get_option( 'bottom_footer_bg_color' ) : 'rgba(0,0,0,0)';						$custom_css =  ! empty(  pegasus_theme_get_option( 'custom_css_textareacode' ) ) ?  pegasus_theme_get_option( 'custom_css_textareacode' ) : 'text';					ob_start();		?>			body {				background-color: <?php echo $bg_color; ?>;				color: <?php echo $content_color; ?>;			}						#top-bar {	background-color: <?php echo $top_bar_bkg_color; ?>; }			#top-bar a { color: <?php echo $top_bar_content_color; ?>; }						#header { background: <?php echo $header_bkg_color; ?>; }						.the-default-nav, .the-default-second-nav, .the-default-third-nav, .the-default-fourth-nav { background-color: <?php echo $nav_bg_color; ?>; }						.the-default-fourth-nav { border-bottom: 5px solid <?php echo $mobile_color; ?> !important; }						header .nav ul li a, header .nav > li > a, #menu-social-icons li:before, .the-nav-cart .sub-menu { color: <?php echo $nav_item_color; ?>; }			.navbar-default .navbar-nav > li > a {  color: <?php echo $nav_item_color; ?>; }												@media only screen and ( min-width: 981px ) {				.sf-mega, .sub-menu { background: <?php echo $sub_nav_bg_color; ?>; }				.sub-menu li a { color: <?php echo $sub_nav_item_color; ?> !important; }				.sf-mega .sub-menu li a { color: <?php echo $nav_item_color; ?> !important; }			}						.the-nav-cart .sub-menu { background: <?php echo $sub_nav_bg_color; ?>; }						<?php /* hover color */ ?>			header .nav > li > a:hover, header .nav > li > a:focus, header .sub-menu a:hover, header .nav ul li a:hover, #top-bar .sub-menu li a:hover { background-color: <?php echo $hover_bg_color; ?> !important; }						.current-menu-item > a, .current-menu-parent > a {  color: <?php echo $current_item_color; ?> !important; }						.navbar-toggle .icon-bar, .default-skin .navbar-default .navbar-toggle .icon-bar, .default-skin .nav .open>a,.default-skin .nav .open>a:focus,.default-skin .nav .open>a:hover { background: <?php echo $mobile_color; ?>; } 			.mobile-menu-close .fa-times-circle:before { color: <?php echo $mobile_color; ?>; } 			.navbar-toggle { border: 1px solid <?php echo $mobile_color; ?> !important; }									<?php 				/*if($header_fixed_checkbox === 'on' && $top_header_checkbox === 'on' && $header_choice === 'header-one' ) { ?>					body { padding-top: 175px; }				<?php }elseif ($header_fixed_checkbox === 'on' ) { ?>					body { padding-top: 140px; }				<?php }else{ 					// do nothing				} */			?>						<?php if($header_three_disable_fixed_checkbox === 'on') { ?>				.header { position: absolute !important; }			<?php } ?>						.noheader-spacer { background: <?php echo $header_three_color; ?>; }			#mobile-menu-wrap { background: <?php echo $header_three_mobile_color; ?>; }						.align-right .navbar-nav { text-align: <?php if($header_three_menu_position == "on") { echo 'right'; }else{ echo 'left'; } ?> !important; }						.default-skin.header.on { background: <?php echo $header_three_scroll_bg_color; ?>; }			.default-skin.header.on .navbar-default .navbar-nav>.open>a, .default-skin.header.on .navbar-default .navbar-nav>.open>a:hover, .default-skin.header.on .navbar-default .navbar-nav>li>a, .default-skin.header.on li.dropdown.open a span, .navbar-default .navbar-nav>.open>a:focus { color: <?php echo $header_three_scroll_item_color; ?>; }						footer { background: <?php echo $footer_bkg_color; ?>; }			#colophon { background: <?php echo $bottom_footer_bkg_color; ?>; }						<?php echo $custom_css; ?>					<?php		wp_add_inline_style( 'pegasus', ob_get_clean() );	}	add_action( 'wp_enqueue_scripts', 'pegasus_theme_scripts' );		function admin_style() {	  wp_enqueue_style('admin-styles', get_template_directory_uri().'/inc/css/admin.css');	}	add_action('admin_enqueue_scripts', 'admin_style');		/**	* Proper way to enqueue scripts and styles as of Mar 2015	*/	function pegasus_bootstrap_scripts() {		//wp_enqueue_style( 'main-style', get_stylesheet_uri() );		wp_enqueue_style( 'bootstrap-style', get_template_directory_uri() . '/inc/css/bootstrap.css' );		wp_enqueue_style( 'font-awesome', get_template_directory_uri() . '/css/font-awesome.css' );		//wp_enqueue_style( 'header_custom_css', get_template_directory_uri() . '/css/header.css' );			} //end function	add_action( 'wp_enqueue_scripts', 'pegasus_bootstrap_scripts' );				/**	* Proper way to enqueue JS and IE fixes as of Mar 2015	*/	function pegasus_bootstrap_js() {					/* get this ready to actually be added */		wp_enqueue_script( 'bootstrap_js', get_template_directory_uri() . '/inc/js/bootstrap.min.js', array('jquery'), '', true );		wp_enqueue_script( 'pegasus_custom_js', get_template_directory_uri() . '/js/pegasus-custom.js', array(), '', true );				wp_enqueue_script( 'js_plugins_custom_js', get_template_directory_uri() . '/js/plugins.js', array(), '', true );				$woo_chk =  pegasus_theme_get_option( 'woo_chk' );		if($woo_chk === 'on') {			wp_enqueue_script( 'cart_cookie_js', get_template_directory_uri() .'/js/cart-cookie.js', array('jquery'), false, true);		}				$header_choice =  pegasus_theme_get_option( 'header_select' );		//echo $header_choice; 		switch ($header_choice) {			case "header-one":				wp_enqueue_style( 'megafish', get_template_directory_uri() . '/css/megafish.css' );					wp_enqueue_script('superfish_js', get_template_directory_uri() .'/js/superfish.js', array('jquery'), false, true);				wp_enqueue_script('hover_intent_js', get_template_directory_uri() .'/js/hoverIntent.js', array('jquery'), false, true);				break;			case "header-two":								break;			case "header-three":								$header_three_choice = get_post_meta( get_the_ID(), 'pegasus-header-three-select', true );				if($header_three_choice === 'sml-header') { wp_enqueue_script( 'parallax_js', get_template_directory_uri() . '/js/parallax.js', array(), '', true ); }				if($header_three_choice === 'lrg-header') { wp_enqueue_script( 'animheader_custom_js', get_template_directory_uri() . '/js/animheader.js', array(), '', true ); }					wp_enqueue_script( 'header_three_js', get_template_directory_uri() . '/js/header-three.js', array(), '', true );				wp_enqueue_style( 'header_three_style', get_template_directory_uri() . '/css/header-three.css' );									break;			case "header-four":								$header_three_choice = get_post_meta( get_the_ID(), 'pegasus-header-three-select', true );				if($header_three_choice === 'sml-header') { wp_enqueue_script( 'parallax_js', get_template_directory_uri() . '/js/parallax.js', array(), '', true ); }				if($header_three_choice === 'lrg-header') { wp_enqueue_script( 'animheader_four_custom_js', get_template_directory_uri() . '/js/animheader-four.js', array(), '', true ); }					//wp_enqueue_script( 'header_three_js', get_template_directory_uri() . '/js/header-three.js', array(), '', true );				wp_enqueue_script( 'header_four_js', get_template_directory_uri() . '/js/header-four.js', array(), '', true );				wp_enqueue_style( 'header_three_style', get_template_directory_uri() . '/css/header-four.css' );									break;			default:				wp_enqueue_style( 'megafish', get_template_directory_uri() . '/css/megafish.css' );					wp_enqueue_script('superfish_js', get_template_directory_uri() .'/js/superfish.js', array('jquery'), false, true);				wp_enqueue_script('hover_intent_js', get_template_directory_uri() .'/js/hoverIntent.js', array('jquery'), false, true);		}					} //end function	add_action( 'wp_enqueue_scripts', 'pegasus_bootstrap_js' );					$header_choice =  pegasus_theme_get_option( 'header_select' );	if( $header_choice === 'header-three' || $header_choice === 'header-four' ){		add_filter('wp_nav_menu_items','add_header_three_link_to_menu', 10, 2);		function add_header_three_link_to_menu( $items, $args ) {			//if( $args->theme_location == 'primary' )				//return $items."<li class=' '><a class='btn btn-default btn-outline btn-circle collapsed'  data-toggle='collapse' href='#nav-collapse1' aria-expanded='false' aria-controls='nav-collapse1'>Categories</a></li>";				 $items .= "<li class='the-more-link'><a class=' collapsed'  data-toggle='collapse' href='#nav-collapse1' aria-expanded='false' aria-controls='nav-collapse1'>More</a></li>";			return $items;		}	}			/*=======================	 SHOW THE EXCERPT 	 ========================*/	function my_custom_init() {		add_post_type_support( 'page', 'excerpt' );	}	add_action('init', 'my_custom_init');				/* PAGINATION */	if ( ! function_exists( 'my_pagination' ) ) :		function my_pagination() {			global $wp_query;			$big = 999999999; // need an unlikely integer			echo paginate_links( array(				'base' => str_replace( $big, '%#%', esc_url( get_pagenum_link( $big ) ) ),				'format' => '?paged=%#%',				'current' => max( 1, get_query_var('paged') ),				'total' => $wp_query->max_num_pages			) );		}	endif;								/* remove admin bar for all users when logged in */	add_filter( 'show_admin_bar', '__return_false' );				/* ========================================================================	=========== WOOCOMMERCE INTEGRATION WITH HOOKS AND FUNCTIONS ===========	=========================================================================*/		remove_action( 'woocommerce_before_main_content', 'woocommerce_output_content_wrapper', 10);	remove_action( 'woocommerce_after_main_content', 'woocommerce_output_content_wrapper_end', 10);	/* hook in your own functions to display the wrappers your theme requires */	add_action('woocommerce_before_main_content', 'my_theme_wrapper_start', 10);	add_action('woocommerce_after_main_content', 'my_theme_wrapper_end', 10);	function my_theme_wrapper_start() {	  echo '<section id="main">';	}	function my_theme_wrapper_end() {	  echo '</section>';	}	/* Make sure that the markup matches that of your theme. If you’re unsure of which classes or IDs to use, take a look at your theme’s page.php for a guide */		/* Declare WooCommerce support */	add_action( 'after_setup_theme', 'woocommerce_support' );	function woocommerce_support() {		add_theme_support( 'woocommerce' );	}		if ( class_exists( 'WooCommerce' ) ) {				//$woo_check =  pegasus_theme_get_option( 'woo_chk' );		//if ( $woo_check === 'on' ) {			// code that requires WooCommerce			// this should only ever fire on non-cached pages (so it SHOULD fire			// whenever we add to cart / update cart / etc			/*function pegasus_update_cart_total_cookie()			{				global $woocommerce;						$cart_total = $woocommerce->cart->cart_contents_count;				setcookie('woocommerce_cart_total', $cart_total, 0, '/');			}			add_action('init', 'pegasus_update_cart_total_cookie'); */			add_filter('add_to_cart_fragments', 'pegasus_woocommerce_header_add_to_cart_fragment');			function pegasus_woocommerce_header_add_to_cart_fragment( $fragments ) {				global $woocommerce;								ob_start();				?>				<a class="cart-contents" href="<?php echo $woocommerce->cart->get_cart_url(); ?>" ><?php echo sprintf(_n('%d', '%d', $woocommerce->cart->cart_contents_count, 'woothemes'), $woocommerce->cart->cart_contents_count);?></a>				<?php				$fragments['a.cart-contents'] = ob_get_clean();				return $fragments;									}		//}	} else {		// you don't appear to have WooCommerce activated		//echo 'Enable WooCommerce';	}	/*=============== END WOOCOMMERCE =================*/							/*==========================		CUSTOM COLUMNS	==========================*/		function my_custom_pages_columns( $columns ) {		/** Add a Thumbnail Column **/		$myCustomColumns = array(			'thumbnail' => __( 'Header Type', 'Aternus' )		);		$columns = array_merge( $columns, $myCustomColumns );		return $columns;	}	add_filter( 'manage_pages_columns', 'my_custom_pages_columns' );					/**	 * Include and setup custom metaboxes and fields. (make sure you copy this file to outside the CMB2 directory)	 *	 * Be sure to replace all instances of 'yourprefix_' with your project's prefix.	 * http://nacin.com/2010/05/11/in-wordpress-prefix-everything/	 *	 * @category YourThemeOrPlugin	 * @package  Demo_CMB2	 * @license  http://www.opensource.org/licenses/gpl-license.php GPL v2.0 (or later)	 * @link     https://github.com/WebDevStudios/CMB2	 */	/**	 * Get the bootstrap! If using the plugin from wordpress.org, REMOVE THIS!	 */	if ( file_exists( dirname( __FILE__ ) . '/cmb2/init.php' ) ) {		require_once dirname( __FILE__ ) . '/cmb2/init.php';	} elseif ( file_exists( dirname( __FILE__ ) . '/CMB2/init.php' ) ) {		require_once dirname( __FILE__ ) . '/CMB2/init.php';	}		add_action( 'cmb2_admin_init', 'pegasus_register_metabox' );	/**	 * Hook in and add a demo metabox. Can only happen on the 'cmb2_admin_init' or 'cmb2_init' hook.	 */	function pegasus_register_metabox() {		// Start with an underscore to hide fields from custom fields list		$prefix = 'pegasus';				/*$cmb_demo->add_field( array(			'name' => __( 'Test Text Area for Code', 'cmb2' ),			'desc' => __( 'field description (optional)', 'cmb2' ),			'id'   => $prefix . 'textarea_code',			'type' => 'textarea_code',		) ); */						/* $cmb_demo->add_field( array(			'name'       => __( 'Test Text', 'cmb2' ),			'desc'       => __( 'field description (optional)', 'cmb2' ),			'id'         => $prefix . 'text',			'type'       => 'text',			//'show_on_cb' => 'yourprefix_hide_if_no_cats', // function should return a bool value			// 'sanitization_cb' => 'my_custom_sanitization', // custom sanitization callback parameter			// 'escape_cb'       => 'my_custom_escaping',  // custom escaping callback parameter			// 'on_front'        => false, // Optionally designate a field to wp-admin only			// 'repeatable'      => true,		) ); */						/* $cmb_demo->add_field( array(			'name' => __( 'Test Title Weeeee', 'cmb2' ),			'desc' => __( 'This is a title description', 'cmb2' ),			'id'   => $prefix . 'title',			'type' => 'title',		) ); */					/* $cmb_demo->add_field( array(			'name' => __( 'Test Image', 'cmb2' ),			'desc' => __( 'Upload an image or enter a URL.', 'cmb2' ),			'id'   => $prefix . 'image',			'type' => 'file',		) ); */		$cmb_demo2 = new_cmb2_box( array(			'id'            => $prefix . 'metabox2',			'title'         => __( 'Pegsus Page Options', 'cmb2' ),			'object_types'  => array( 'page', 'post', 'course_unit' ), // Post type			// 'show_on_cb' => 'yourprefix_show_if_front_page', // function should return a bool value			// 'context'    => 'normal',			// 'priority'   => 'high',			// 'show_names' => true, // Show field names on the left			// 'cmb_styles' => false, // false to disable the CMB stylesheet			// 'closed'     => true, // true to keep the metabox closed by default		) );		$cmb_demo2->add_field( array(			'name' => __( 'Fullwidth Container Checkbox', 'cmb2' ),			'desc' => __( 'Check this box to make the page fullwidth', 'cmb2' ),			'id'   => $prefix . '-page-container-checkbox',			'type' => 'checkbox',		) ); 									/**		 * Sample metabox to demonstrate each field type included		 */		$cmb_demo = new_cmb2_box( array(			'id'            => $prefix . 'metabox',			'title'         => __( 'Pegsus Header Three & Header Four Options', 'cmb2' ),			'object_types'  => array( 'page',  'course_unit' ), // Post type			// 'show_on_cb' => 'yourprefix_show_if_front_page', // function should return a bool value			// 'context'    => 'normal',			// 'priority'   => 'high',			// 'show_names' => true, // Show field names on the left			// 'cmb_styles' => false, // false to disable the CMB stylesheet			// 'closed'     => true, // true to keep the metabox closed by default		) );		$cmb_demo->add_field( array(			'name'             => __( 'Header Select', 'cmb2' ),			'desc'             => __( 'This option only works when you have Header Three or Header Four select in the Theme Options. Select Header Type (no hdr, sml hdr, lrg hdr)', 'cmb2' ),			'id'               => $prefix . '-header-three-select',			'type'             => 'select',			//'show_option_none' => false,			'default'          => 'no-header',			'options'          => array(				'no-header' => __( 'No Header - Just Spacing', 'cmb2' ),				'sml-header'   => __( 'Small Header - With Parallax', 'cmb2' ),				'lrg-header'     => __( 'Large Header - Full Width and Height', 'cmb2' ),			),		) );		$cmb_demo->add_field( array(			'name'    => __( 'Header Content wysiwyg', 'cmb2' ),			'desc'    => __( 'This option only works when you have Header Three or Header Four select in the Theme Options.', 'cmb2' ),			'id'      => $prefix . '-header-three-wysiwyg',			'type'    => 'wysiwyg',			'options' => array( 'textarea_rows' => 5, ),		) );					}																	/*===============================================================		FRONT END FORM SUBMISSION 	================================================================*/				/**	 * Register the form and fields for our front-end submission form	 */	function wds_frontend_form_register() {		$cmb = new_cmb2_box( array(			'id'           => 'front-end-post-form',			'object_types' => array( 'post' ),			'hookup'       => false,			'save_fields'  => false,		) );		$cmb->add_field( array(			'name'    => __( 'New Post Title', 'wds-post-submit' ),			'id'      => 'submitted_post_title',			'type'    => 'text',			'default' => __( 'New Post', 'wds-post-submit' ),		) );		$cmb->add_field( array(			'name'    => __( 'New Post Content', 'wds-post-submit' ),			'id'      => 'submitted_post_content',			'type'    => 'wysiwyg',			'options' => array(				'textarea_rows' => 12,				'media_buttons' => false,			),		) );		$cmb->add_field( array(			'name'       => __( 'Featured Image for New Post', 'wds-post-submit' ),			'id'         => 'submitted_post_thumbnail',			'type'       => 'text',			'attributes' => array(				'type' => 'file', // Let's use a standard file upload field			),		) );		$cmb->add_field( array(			'name' => 'Test File List',			'desc' => '',			'id'   => 'wiki_test_file_list',			'type' => 'file_list',			// 'preview_size' => array( 100, 100 ), // Default: array( 50, 50 )			// Optional, override default text strings			/*'text' => array(				'add_upload_files_text' => 'Replacement', // default: "Add or Upload Files"				'remove_image_text' => 'Replacement', // default: "Remove Image"				'file_text' => 'Replacement', // default: "File:"				'file_download_text' => 'Replacement', // default: "Download"				'remove_text' => 'Replacement', // default: "Remove"			),*/		) );		$cmb->add_field( array(			'name' => __( 'Your Name', 'wds-post-submit' ),			'desc' => __( 'Please enter your name for author credit on the new post.', 'wds-post-submit' ),			'id'   => 'submitted_author_name',			'type' => 'text',		) );		$cmb->add_field( array(			'name' => __( 'Your Email', 'wds-post-submit' ),			'desc' => __( 'Please enter your email so we can contact you if we use your post.', 'wds-post-submit' ),			'id'   => 'submitted_author_email',			'type' => 'text_email',		) );	}	add_action( 'cmb2_init', 'wds_frontend_form_register' );	/**	 * Gets the front-end-post-form cmb instance	 *	 * @return CMB2 object	 */	function wds_frontend_cmb2_get() {		// Use ID of metabox in wds_frontend_form_register		$metabox_id = 'front-end-post-form';		// Post/object ID is not applicable since we're using this form for submission		$object_id  = 'fake-oject-id';		// Get CMB2 metabox object		return cmb2_get_metabox( $metabox_id, $object_id );	}	/**	 * Handle the cmb-frontend-form shortcode	 *	 * @param  array  $atts Array of shortcode attributes	 * @return string       Form html	 */	function wds_do_frontend_form_submission_shortcode( $atts = array() ) {		// Get CMB2 metabox object		$cmb = wds_frontend_cmb2_get();		// Get $cmb object_types		$post_types = $cmb->prop( 'object_types' );		// Current user		$user_id = get_current_user_id();		// Parse attributes		$atts = shortcode_atts( array(			'post_author' => $user_id ? $user_id : 1, // Current user, or admin			'post_status' => 'pending',			'post_type'   => reset( $post_types ), // Only use first object_type in array		), $atts, 'cmb-frontend-form' );		/*		 * Let's add these attributes as hidden fields to our cmb form		 * so that they will be passed through to our form submission		 */		foreach ( $atts as $key => $value ) {			$cmb->add_hidden_field( array(				'field_args'  => array(					'id'    => "atts[$key]",					'type'  => 'hidden',					'default' => $value,				),			) );		}		// Initiate our output variable		$output = '';		// Get any submission errors		if ( ( $error = $cmb->prop( 'submission_error' ) ) && is_wp_error( $error ) ) {			// If there was an error with the submission, add it to our ouput.			$output .= '<h3>' . sprintf( __( 'There was an error in the submission: %s', 'wds-post-submit' ), '<strong>'. $error->get_error_message() .'</strong>' ) . '</h3>';		}		// If the post was submitted successfully, notify the user.		if ( isset( $_GET['post_submitted'] ) && ( $post = get_post( absint( $_GET['post_submitted'] ) ) ) ) {			// Get submitter's name			$name = get_post_meta( $post->ID, 'submitted_author_name', 1 );			$name = $name ? ' '. $name : '';			// Add notice of submission to our output			$output .= '<h3>' . sprintf( __( 'Thank you%s, your new post has been submitted and is pending review by a site administrator.', 'wds-post-submit' ), esc_html( $name ) ) . '</h3>';		}		// Get our form		$output .= cmb2_get_metabox_form( $cmb, 'fake-oject-id', array( 'save_button' => __( 'Submit Post', 'wds-post-submit' ) ) );		return $output;	}	add_shortcode( 'cmb-frontend-form', 'wds_do_frontend_form_submission_shortcode' );	/**	 * Handles form submission on save. Redirects if save is successful, otherwise sets an error message as a cmb property	 *	 * @return void	 */	function wds_handle_frontend_new_post_form_submission() {		// If no form submission, bail		if ( empty( $_POST ) || ! isset( $_POST['submit-cmb'], $_POST['object_id'] ) ) {			return false;		}		// Get CMB2 metabox object		$cmb = wds_frontend_cmb2_get();		$post_data = array();		// Get our shortcode attributes and set them as our initial post_data args		if ( isset( $_POST['atts'] ) ) {			foreach ( (array) $_POST['atts'] as $key => $value ) {				$post_data[ $key ] = sanitize_text_field( $value );			}			unset( $_POST['atts'] );		}		// Check security nonce		if ( ! isset( $_POST[ $cmb->nonce() ] ) || ! wp_verify_nonce( $_POST[ $cmb->nonce() ], $cmb->nonce() ) ) {			return $cmb->prop( 'submission_error', new WP_Error( 'security_fail', __( 'Security check failed.' ) ) );		}		// Check title submitted		if ( empty( $_POST['submitted_post_title'] ) ) {			return $cmb->prop( 'submission_error', new WP_Error( 'post_data_missing', __( 'New post requires a title.' ) ) );		}		// And that the title is not the default title		if ( $cmb->get_field( 'submitted_post_title' )->default() == $_POST['submitted_post_title'] ) {			return $cmb->prop( 'submission_error', new WP_Error( 'post_data_missing', __( 'Please enter a new title.' ) ) );		}		/**		 * Fetch sanitized values		 */		$sanitized_values = $cmb->get_sanitized_values( $_POST );		// Set our post data arguments		$post_data['post_title']   = $sanitized_values['submitted_post_title'];		unset( $sanitized_values['submitted_post_title'] );		$post_data['post_content'] = $sanitized_values['submitted_post_content'];		unset( $sanitized_values['submitted_post_content'] );		// Create the new post		$new_submission_id = wp_insert_post( $post_data, true );		// If we hit a snag, update the user		if ( is_wp_error( $new_submission_id ) ) {			return $cmb->prop( 'submission_error', $new_submission_id );		}		/**		 * Other than post_type and post_status, we want		 * our uploaded attachment post to have the same post-data		 */		unset( $post_data['post_type'] );		unset( $post_data['post_status'] );		// Try to upload the featured image		$img_id = wds_frontend_form_photo_upload( $new_submission_id, $post_data );		// If our photo upload was successful, set the featured image		if ( $img_id && ! is_wp_error( $img_id ) ) {			set_post_thumbnail( $new_submission_id, $img_id );		}		// Loop through remaining (sanitized) data, and save to post-meta		foreach ( $sanitized_values as $key => $value ) {			if ( is_array( $value ) ) {				$value = array_filter( $value );				if( ! empty( $value ) ) {					update_post_meta( $new_submission_id, $key, $value );				}			} else {				update_post_meta( $new_submission_id, $key, $value );			}		}		/*		 * Redirect back to the form page with a query variable with the new post ID.		 * This will help double-submissions with browser refreshes		 */		wp_redirect( esc_url_raw( add_query_arg( 'post_submitted', $new_submission_id ) ) );		exit;	}	add_action( 'cmb2_after_init', 'wds_handle_frontend_new_post_form_submission' );	/**	 * Handles uploading a file to a WordPress post	 *	 * @param  int   $post_id              Post ID to upload the photo to	 * @param  array $attachment_post_data Attachement post-data array	 */	function wds_frontend_form_photo_upload( $post_id, $attachment_post_data = array() ) {		// Make sure the right files were submitted		if (			empty( $_FILES )			|| ! isset( $_FILES['submitted_post_thumbnail'] )			|| isset( $_FILES['submitted_post_thumbnail']['error'] ) && 0 !== $_FILES['submitted_post_thumbnail']['error']		) {			return;		}		// Filter out empty array values		$files = array_filter( $_FILES['submitted_post_thumbnail'] );		// Make sure files were submitted at all		if ( empty( $files ) ) {			return;		}		// Make sure to include the WordPress media uploader API if it's not (front-end)		if ( ! function_exists( 'media_handle_upload' ) ) {			require_once( ABSPATH . 'wp-admin/includes/image.php' );			require_once( ABSPATH . 'wp-admin/includes/file.php' );			require_once( ABSPATH . 'wp-admin/includes/media.php' );		}		// Upload the file and send back the attachment post ID		return media_handle_upload( 'submitted_post_thumbnail', $post_id, $attachment_post_data );	}	?>